//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ladders
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Wednesday, 11 November 2015 01:11.
    // Build:1.0.61214.0829
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0829")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("Count={Count}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.CollectionTypeConverter))]
    public partial class LadderPointsCollection : System.Collections.IList, System.Collections.ICollection, CodeFluent.Runtime.ICodeFluentSet, System.Collections.Generic.IList<Ladders.LadderPoints>, System.Collections.Generic.ICollection<Ladders.LadderPoints>, System.ComponentModel.IRaiseItemChangedEvents, System.ICloneable, System.ComponentModel.INotifyPropertyChanged, System.Collections.Specialized.INotifyCollectionChanged, System.ComponentModel.IBindingList, System.ComponentModel.ICancelAddNew
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private bool _raiseCollectionChangedEvents = true;
        
        [System.NonSerializedAttribute()]
        private System.Collections.Generic.List<Ladders.LadderPoints> _baseList = new System.Collections.Generic.List<Ladders.LadderPoints>();
        
        [System.NonSerializedAttribute()]
        private System.Collections.Generic.Dictionary<int, Ladders.LadderPoints> _baseTable = new System.Collections.Generic.Dictionary<int, Ladders.LadderPoints>();
        
        [System.NonSerializedAttribute()]
        private System.Collections.Hashtable _relations = new System.Collections.Hashtable();
        
        private int _maxCount = 2147483647;
        
        [System.NonSerializedAttribute()]
        private Ladders.Ladder _unspecifiedLadderLadder;
        
        [System.NonSerializedAttribute()]
        private Ladders.PlayerRating _unspecifiedPlayerRatingRating;
        
        [System.NonSerializedAttribute()]
        private int _addNewPos = -1;
        
        [System.NonSerializedAttribute()]
        private CodeFluent.Runtime.Utilities.BindingListManager<Ladders.LadderPoints> _blm4167706227;
        
        private bool _raiseListChangedEvents = true;
        
        private System.Collections.Specialized.NotifyCollectionChangedEventHandler _h2943838991;

        event System.Collections.Specialized.NotifyCollectionChangedEventHandler System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged{add{_h2943838991+=value;}remove{_h2943838991-=value;}}
        
        public LadderPointsCollection()
        {
            this._blm4167706227 = new CodeFluent.Runtime.Utilities.BindingListManager<Ladders.LadderPoints>(this);
        }
        
        public LadderPointsCollection(Ladders.Ladder unspecifiedLadderLadder, Ladders.PlayerRating unspecifiedPlayerRatingRating)
        {
            this._blm4167706227 = new CodeFluent.Runtime.Utilities.BindingListManager<Ladders.LadderPoints>(this);
            this._unspecifiedLadderLadder = unspecifiedLadderLadder;
            this._unspecifiedPlayerRatingRating = unspecifiedPlayerRatingRating;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual bool RaiseCollectionChangedEvents
        {
            get
            {
                return this._raiseCollectionChangedEvents;
            }
            set
            {
                this._raiseCollectionChangedEvents = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected System.Collections.Generic.List<Ladders.LadderPoints> BaseList
        {
            get
            {
                return this._baseList;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        protected System.Collections.Generic.Dictionary<int, Ladders.LadderPoints> BaseTable
        {
            get
            {
                return this._baseTable;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        System.Collections.IDictionary CodeFluent.Runtime.ICodeFluentSet.Relations
        {
            get
            {
                return this._relations;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        public virtual int MaxCount
        {
            get
            {
                return this._maxCount;
            }
            set
            {
                this._maxCount = value;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Ladders.Ladder UnspecifiedLadderLadder
        {
            get
            {
                return this._unspecifiedLadderLadder;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Ladders.PlayerRating UnspecifiedPlayerRatingRating
        {
            get
            {
                return this._unspecifiedPlayerRatingRating;
            }
        }
        
        public Ladders.LadderPoints this[int index]
        {
            get
            {
                return ((Ladders.LadderPoints)(this.BaseList[index]));
            }
            set
            {
                this.BaseList[index] = value;
            }
        }
        
        object System.Collections.IList.this[int index]
        {
            get
            {
                object i = this.BaseList[index];
                return i;
            }
            set
            {
                this.BaseList[index] = ((Ladders.LadderPoints)(value));
            }
        }
        
        public virtual int Count
        {
            get
            {
                int v = ((System.Collections.IList)(this.BaseList)).Count;
                return v;
            }
        }
        
        public virtual bool IsSynchronized
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsSynchronized;
                return v;
            }
        }
        
        public virtual object SyncRoot
        {
            get
            {
                object v = ((System.Collections.IList)(this.BaseList)).SyncRoot;
                return v;
            }
        }
        
        public virtual bool IsFixedSize
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsFixedSize;
                return v;
            }
        }
        
        public virtual bool IsReadOnly
        {
            get
            {
                bool v = ((System.Collections.IList)(this.BaseList)).IsReadOnly;
                return v;
            }
        }
        
        public virtual bool RaiseListChangedEvents
        {
            get
            {
                return this._raiseListChangedEvents;
            }
            set
            {
                this._raiseListChangedEvents = value;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowEdit
        {
            get
            {
                return this._blm4167706227.AllowEdit;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowNew
        {
            get
            {
                return this._blm4167706227.AllowNew;
            }
        }
        
        bool System.ComponentModel.IBindingList.AllowRemove
        {
            get
            {
                return this._blm4167706227.AllowRemove;
            }
        }
        
        bool System.ComponentModel.IBindingList.IsSorted
        {
            get
            {
                return this._blm4167706227.IsSorted;
            }
        }
        
        System.ComponentModel.ListSortDirection System.ComponentModel.IBindingList.SortDirection
        {
            get
            {
                return this._blm4167706227.SortDirection;
            }
        }
        
        System.ComponentModel.PropertyDescriptor System.ComponentModel.IBindingList.SortProperty
        {
            get
            {
                return this._blm4167706227.SortProperty;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsChangeNotification
        {
            get
            {
                return true;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsSearching
        {
            get
            {
                return this._blm4167706227.SupportsSearching;
            }
        }
        
        bool System.ComponentModel.IBindingList.SupportsSorting
        {
            get
            {
                return this._blm4167706227.SupportsSorting;
            }
        }
        
        bool System.ComponentModel.IRaiseItemChangedEvents.RaisesItemChangedEvents
        {
            get
            {
                return this.RaiseListChangedEvents;
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.AddingNewEventHandler AddingNew;
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.ListChangedEventHandler ListChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs e)
        {
            if ((this.RaiseCollectionChangedEvents == false))
            {
                return;
            }
            if ((this.CollectionChanged != null))
            {
                this.CollectionChanged(this, e);
            }
            CodeFluent.Runtime.ServiceModel.CollectionChangeNotifier.Notify(this, e, this._h2943838991);
            this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Count"));
            this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Item[]"));
        }
        
        protected virtual void Relate(Ladders.LadderPoints item, CodeFluent.Runtime.CodeFluentRelationType relationType)
        {
            ((CodeFluent.Runtime.ICodeFluentSet)(this)).Relations[item] = relationType;
        }
        
        public int Add(Ladders.LadderPoints ladderPoints)
        {
            int localAdd = this.BaseList.Count;
            this.BaseAdd(ladderPoints);
            return localAdd;
        }
        
        protected virtual int BaseAdd(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                throw new System.ArgumentNullException("ladderPoints");
            }
            if ((ladderPoints.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "ladderPoints", "Ladders.LadderPoints");
            }
            try
            {
                this.BaseTable.Add(ladderPoints.Id, ladderPoints);
            }
            catch (System.ArgumentNullException ane)
            {
                throw new System.ArgumentNullException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "Ladders.LadderPointsCollection", ladderPoints.EntityKey), ane);
            }
            catch (System.ArgumentException ae)
            {
                throw new System.ArgumentException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "Ladders.LadderPointsCollection", ladderPoints.Id), ae);
            }
            ladderPoints.KeyChanged += new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>>(this.OnItemKeyChanged);
            int localAdd = this.BaseList.Count;
            this.BaseList.Add(ladderPoints);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, ladderPoints, localAdd));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, localAdd));
            return localAdd;
        }
        
        int System.Collections.IList.Add(object value)
        {
            Ladders.LadderPoints ladderPoints = null;
            try
            {
                ladderPoints = ((Ladders.LadderPoints)(value));
            }
            catch (System.InvalidCastException )
            {
                string key = null;
                try
                {
                    key = ((string)(value));
                    int count = this.Count;
                    if ((this.AddByEntityKey(key) != null))
                    {
                        return 1;
                    }
                    return 0;
                }
                catch (System.InvalidCastException )
                {
                }
                if ((key == null))
                {
                    throw new System.ArgumentException("value");
                }
            }
            if ((ladderPoints == null))
            {
                throw new System.ArgumentException("value");
            }
            int localAdd = this.Add(ladderPoints);
            return localAdd;
        }
        
        void System.Collections.Generic.ICollection<Ladders.LadderPoints>.Add(Ladders.LadderPoints ladderPoints)
        {
            this.BaseAdd(ladderPoints);
        }
        
        public virtual Ladders.LadderPoints AddByEntityKey(string key)
        {
            Ladders.LadderPoints ladderPoints = Ladders.LadderPoints.LoadByEntityKey(key);
            if (((ladderPoints != null) 
                        && (this.Contains(ladderPoints) == false)))
            {
                this.Add(ladderPoints);
            }
            return ladderPoints;
        }
        
        public void Sort()
        {
            this.Sort(null);
        }
        
        public virtual void Sort(System.Collections.Generic.IComparer<Ladders.LadderPoints> comparer)
        {
            this.BaseList.Sort(comparer);
        }
        
        public void CopyTo(Ladders.LadderPoints[] array, int index)
        {
            this.BaseCopyTo(array, index);
        }
        
        protected virtual void BaseCopyTo(Ladders.LadderPoints[] array, int index)
        {
            this.BaseList.CopyTo(array, index);
        }
        
        void System.Collections.ICollection.CopyTo(System.Array array, int index)
        {
            CodeFluent.Runtime.Utilities.ConvertUtilities.CopyTo(this, array, index);
        }
        
        public bool Contains(Ladders.LadderPoints ladderPoints)
        {
            bool localContains = this.BaseContains(ladderPoints);
            return localContains;
        }
        
        protected virtual bool BaseContains(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                return false;
            }
            bool localContains = this.BaseTable.ContainsKey(ladderPoints.Id);
            return localContains;
        }
        
        bool System.Collections.IList.Contains(object value)
        {
            Ladders.LadderPoints ladderPoints;
			ladderPoints = value as Ladders.LadderPoints;
            return this.Contains(ladderPoints);
        }
        
        public int IndexOf(Ladders.LadderPoints ladderPoints)
        {
            int localIndexOf = this.BaseIndexOf(ladderPoints);
            return localIndexOf;
        }
        
        protected virtual int BaseIndexOf(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                return -1;
            }
            int localIndexOf = this.BaseList.IndexOf(ladderPoints);
            return localIndexOf;
        }
        
        int System.Collections.IList.IndexOf(object value)
        {
            Ladders.LadderPoints ladderPoints;
			ladderPoints = value as Ladders.LadderPoints;
            return this.IndexOf(ladderPoints);
        }
        
        public void Insert(int index, Ladders.LadderPoints ladderPoints)
        {
            this.BaseInsert(index, ladderPoints);
        }
        
        protected virtual void BaseInsert(int index, Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                throw new System.ArgumentNullException("ladderPoints");
            }
            try
            {
                this.BaseTable.Add(ladderPoints.Id, ladderPoints);
            }
            catch (System.ArgumentNullException ane)
            {
                throw new System.ArgumentNullException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "Ladders.LadderPointsCollection", ladderPoints.EntityKey), ane);
            }
            catch (System.ArgumentException ae)
            {
                throw new System.ArgumentException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "Ladders.LadderPointsCollection", ladderPoints.Id), ae);
            }
            this.BaseList.Insert(index, ladderPoints);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Add, ladderPoints, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemAdded, index));
        }
        
        void System.Collections.IList.Insert(int index, object value)
        {
            Ladders.LadderPoints ladderPoints;
			ladderPoints = value as Ladders.LadderPoints;
            this.Insert(index, ladderPoints);
        }
        
        public virtual void Clear()
        {
            int index;
            int count = this.Count;
            for (index = 0; (index < count); index = (index + 1))
            {
                Ladders.LadderPoints LadderPoints = this[0];
                this.BaseRemove(LadderPoints);
            }
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Refresh, null));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.Reset, -1));
        }
        
        public bool Remove(Ladders.LadderPoints ladderPoints)
        {
            return this.BaseRemove(ladderPoints);
        }
        
        protected virtual bool BaseRemove(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                throw new System.ArgumentNullException("ladderPoints");
            }
            int index = this.IndexOf(ladderPoints);
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(((System.ComponentModel.ListChangedType)(CodeFluent.Runtime.Utilities.SortableBindingList<Ladders.LadderPoints>.ListChangedTypeDeleting)), index));
            bool ret;
            ret = this.BaseList.Remove(ladderPoints);
            ladderPoints.KeyChanged -= new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>>(this.OnItemKeyChanged);
            ret = this.BaseTable.Remove(ladderPoints.Id);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, ladderPoints, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index));
            return ret;
        }
        
        void System.Collections.IList.Remove(object value)
        {
            Ladders.LadderPoints ladderPoints;
			ladderPoints = value as Ladders.LadderPoints;
            this.Remove(ladderPoints);
        }
        
        public virtual void RemoveAt(int index)
        {
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(((System.ComponentModel.ListChangedType)(CodeFluent.Runtime.Utilities.SortableBindingList<Ladders.LadderPoints>.ListChangedTypeDeleting)), index));
            Ladders.LadderPoints ladderPoints = this.BaseList[index];
            if ((ladderPoints != null))
            {
                ladderPoints.KeyChanged -= new System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>>(this.OnItemKeyChanged);
                this.BaseTable.Remove(ladderPoints.Id);
            }
            this.BaseList.RemoveAt(index);
            this.OnCollectionChanged(new CodeFluent.Runtime.Utilities.IndexedCollectionChangeEventArgs(System.ComponentModel.CollectionChangeAction.Remove, ladderPoints, index));
            this.OnListChanged(new System.ComponentModel.ListChangedEventArgs(System.ComponentModel.ListChangedType.ItemDeleted, index));
        }
        
        public virtual System.Collections.Generic.IEnumerator<Ladders.LadderPoints> GetEnumerator()
        {
            System.Collections.Generic.IEnumerator<Ladders.LadderPoints> e = this.BaseList.GetEnumerator();
            return e;
        }
        
        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return this.BaseList.GetEnumerator();
        }
        
        private Ladders.LadderPoints TryGetValue(int key)
        {
            Ladders.LadderPoints ladderPoints;
            if ((this.BaseTable.TryGetValue(key, out ladderPoints) == true))
            {
                return ladderPoints;
            }
            return null;
        }
        
        public void SetItem(int id, Ladders.LadderPoints value)
        {
            if ((id == -1))
            {
                throw new System.ArgumentNullException("id");
            }
            if ((value == null))
            {
                Ladders.LadderPoints ladderPoints = this.TryGetValue(id);
                if ((ladderPoints != null))
                {
                    this.Remove(ladderPoints);
                }
                return;
            }
            this.BaseTable[value.Id] = value;
        }
        
        public Ladders.LadderPoints GetItem(int id)
        {
            if ((id == -1))
            {
                throw new System.ArgumentNullException("id");
            }
            Ladders.LadderPoints i = this.TryGetValue(id);
            return i;
        }
        
        public virtual void SaveAll()
        {
            int index;
            for (index = (this.Count - 1); (index >= 0); index = (index - 1))
            {
                Ladders.LadderPoints ladderPoints = this[index];
                ladderPoints.Save();
                if ((ladderPoints.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
                {
                    this.Remove(ladderPoints);
                }
            }
        }
        
        private void LoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            this._unspecifiedLadderLadder = null;
            this._unspecifiedPlayerRatingRating = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    Ladders.LadderPoints ladderPoints = new Ladders.LadderPoints();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(ladderPoints)).ReadRecord(reader);
                    if ((this.BaseContains(ladderPoints) == false))
                    {
                        this.BaseAdd(ladderPoints);
                        count = (count + 1);
                    }
                    ladderPoints.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadAll(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            Ladders.LadderPointsCollection ret = new Ladders.LadderPointsCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = Ladders.LadderPointsCollection.PageDataLoadAll(pageOptions);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadAll(pageIndex, pageSize, pageOptions, reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(TennisClubLadder.Constants.TennisClubLadderStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection LoadAll()
        {
            Ladders.LadderPointsCollection ret = Ladders.LadderPointsCollection.PageLoadAll(int.MinValue, int.MaxValue, null);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadAll(CodeFluent.Runtime.PageOptions pageOptions)
        {
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "LadderPoints", "LoadAll");
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadAll()
        {
            System.Data.IDataReader reader = Ladders.LadderPointsCollection.PageDataLoadAll(null);
            return reader;
        }
        
        private void LoadByLadder(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, Ladders.Ladder ladder)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            CodeFluent.Runtime.CodeFluentEntityState ladderState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            if ((ladder != null))
            {
                ladderState = ladder.EntityState;
            }
            this._unspecifiedLadderLadder = ladder;
            this._unspecifiedPlayerRatingRating = null;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    Ladders.LadderPoints ladderPoints = new Ladders.LadderPoints();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(ladderPoints)).ReadRecord(reader);
                    if ((this.BaseContains(ladderPoints) == false))
                    {
                        this.BaseAdd(ladderPoints);
                        count = (count + 1);
                    }
                    ladderPoints.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
            if ((ladder != null))
            {
                ladder.EntityState = ladderState;
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadByLadder(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, Ladders.Ladder ladder)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            Ladders.LadderPointsCollection ret = new Ladders.LadderPointsCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = Ladders.LadderPointsCollection.PageDataLoadByLadder(pageOptions, ladder);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByLadder(pageIndex, pageSize, pageOptions, reader, ladder);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(TennisClubLadder.Constants.TennisClubLadderStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection LoadByLadder(Ladders.Ladder ladder)
        {
            Ladders.LadderPointsCollection ret = Ladders.LadderPointsCollection.PageLoadByLadder(int.MinValue, int.MaxValue, null, ladder);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByLadder(CodeFluent.Runtime.PageOptions pageOptions, Ladders.Ladder ladder)
        {
            if ((ladder == null))
            {
                return null;
            }
            if ((ladder.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "ladder", "Ladders.Ladder");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "LadderPoints", "LoadByLadder");
            persistence.AddParameter("@LadderId", ladder.Id, ((int)(-1)));
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByLadder(Ladders.Ladder ladder)
        {
            System.Data.IDataReader reader = Ladders.LadderPointsCollection.PageDataLoadByLadder(null, ladder);
            return reader;
        }
        
        private void LoadByRating(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, System.Data.IDataReader reader, Ladders.PlayerRating rating)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            CodeFluent.Runtime.CodeFluentEntityState playerRatingState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            if ((rating != null))
            {
                playerRatingState = rating.EntityState;
            }
            this._unspecifiedLadderLadder = null;
            this._unspecifiedPlayerRatingRating = rating;
            this.BaseList.Clear();
            this.BaseTable.Clear();
            int count = 0;
            int readCount = 0;
            bool readerRead;
            for (readerRead = reader.Read(); ((readerRead == true) 
                        && ((count < this.MaxCount) 
                        && (count < pageSize))); readerRead = reader.Read())
            {
                readCount = (readCount + 1);
                if ((CodeFluent.Runtime.CodeFluentPersistence.CanAddEntity(pageIndex, pageSize, pageOptions, readCount) == true))
                {
                    Ladders.LadderPoints ladderPoints = new Ladders.LadderPoints();
                    ((CodeFluent.Runtime.ICodeFluentEntity)(ladderPoints)).ReadRecord(reader);
                    if ((this.BaseContains(ladderPoints) == false))
                    {
                        this.BaseAdd(ladderPoints);
                        count = (count + 1);
                    }
                    ladderPoints.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                }
            }
            if ((rating != null))
            {
                rating.EntityState = playerRatingState;
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadByRating(int pageIndex, int pageSize, CodeFluent.Runtime.PageOptions pageOptions, Ladders.PlayerRating rating)
        {
            if ((pageIndex < 0))
            {
                pageIndex = 0;
            }
            if ((pageSize < 0))
            {
                if ((pageOptions != null))
                {
                    pageSize = pageOptions.DefaultPageSize;
                }
                else
                {
                    pageSize = int.MaxValue;
                }
            }
            Ladders.LadderPointsCollection ret = new Ladders.LadderPointsCollection();
            System.Data.IDataReader reader = null;
            try
            {
                reader = Ladders.LadderPointsCollection.PageDataLoadByRating(pageOptions, rating);
                if ((reader == null))
                {
                    return ret;
                }
                ret.LoadByRating(pageIndex, pageSize, pageOptions, reader, rating);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                CodeFluent.Runtime.CodeFluentPersistence.CompleteCommand(TennisClubLadder.Constants.TennisClubLadderStoreName);
            }
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection LoadByRating(Ladders.PlayerRating rating)
        {
            Ladders.LadderPointsCollection ret = Ladders.LadderPointsCollection.PageLoadByRating(int.MinValue, int.MaxValue, null, rating);
            return ret;
        }
        
        public static System.Data.IDataReader PageDataLoadByRating(CodeFluent.Runtime.PageOptions pageOptions, Ladders.PlayerRating rating)
        {
            if ((rating == null))
            {
                return null;
            }
            if ((rating.Id == -1))
            {
                CodeFluent.Runtime.CodeFluentRuntimeException.Throw("invalidEntityKey", "Id", "rating", "Ladders.PlayerRating");
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "LadderPoints", "LoadByRating");
            persistence.AddParameter("@RatingId", rating.Id, ((int)(-1)));
            if ((pageOptions != null))
            {
                System.Collections.IEnumerator enumerator = pageOptions.OrderByArguments.GetEnumerator();
                bool b;
                int index = 0;
                for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
                {
                    CodeFluent.Runtime.OrderByArgument argument = ((CodeFluent.Runtime.OrderByArgument)(enumerator.Current));
                    persistence.AddParameter(string.Format("@_orderBy{0}", index), argument.Name);
                    persistence.AddParameter(string.Format("@_orderByDirection{0}", index), ((int)(argument.Direction)));
                    index = (index + 1);
                }
            }
            System.Data.IDataReader reader = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence.ExecuteReader();
            return reader;
        }
        
        public static System.Data.IDataReader DataLoadByRating(Ladders.PlayerRating rating)
        {
            System.Data.IDataReader reader = Ladders.LadderPointsCollection.PageDataLoadByRating(null, rating);
            return reader;
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write(string.Concat("Count=", this.Count));
            writer.Write("]");
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        public virtual void CopyTo(Ladders.LadderPointsCollection collection, bool deep)
        {
            if ((typeof(System.ICloneable).IsAssignableFrom(typeof(Ladders.LadderPoints)) == false))
            {
                deep = false;
            }
            System.Collections.Generic.IEnumerator<Ladders.LadderPoints> enumerator = this.GetEnumerator();
            bool b;
            for (b = enumerator.MoveNext(); b; b = enumerator.MoveNext())
            {
                if ((deep == true))
                {
                    collection.Add(((Ladders.LadderPoints)(((System.ICloneable)(enumerator.Current)).Clone())));
                }
                else
                {
                    collection.Add(enumerator.Current);
                }
            }
        }
        
        public virtual Ladders.LadderPointsCollection Clone(bool deep)
        {
            Ladders.LadderPointsCollection ret = new Ladders.LadderPointsCollection();
            this.CopyTo(ret, deep);
            return ret;
        }
        
        object System.ICloneable.Clone()
        {
            return this.Clone(true);
        }
        
        public virtual void CancelNew(int index)
        {
            if (((this._addNewPos >= 0) 
                        && (this._addNewPos == index)))
            {
                this.RemoveAt(index);
                this._addNewPos = -1;
            }
        }
        
        public virtual void EndNew(int index)
        {
            if (((this._addNewPos >= 0) 
                        && (this._addNewPos == index)))
            {
                this._addNewPos = -1;
            }
        }
        
        void System.ComponentModel.IBindingList.AddIndex(System.ComponentModel.PropertyDescriptor property)
        {
            this._blm4167706227.AddIndex(property);
        }
        
        protected virtual void OnAddingNew(System.ComponentModel.AddingNewEventArgs e)
        {
            if ((this.AddingNew != null))
            {
                this.AddingNew(this, e);
            }
        }
        
        object System.ComponentModel.IBindingList.AddNew()
        {
            Ladders.LadderPoints add = new Ladders.LadderPoints();
            System.ComponentModel.AddingNewEventArgs e = new System.ComponentModel.AddingNewEventArgs(add);
            this.OnAddingNew(e);
            add = ((Ladders.LadderPoints)(e.NewObject));
            if ((add == null))
            {
                add = new Ladders.LadderPoints();
            }
            add.Id = 0;
            this._addNewPos = this.Add(add);
            return add;
        }
        
        void System.ComponentModel.IBindingList.ApplySort(System.ComponentModel.PropertyDescriptor property, System.ComponentModel.ListSortDirection direction)
        {
            this._blm4167706227.ApplySort(property, direction);
        }
        
        int System.ComponentModel.IBindingList.Find(System.ComponentModel.PropertyDescriptor property, object key)
        {
            return this._blm4167706227.Find(property, key);
        }
        
        void System.ComponentModel.IBindingList.RemoveIndex(System.ComponentModel.PropertyDescriptor property)
        {
            this._blm4167706227.RemoveIndex(property);
        }
        
        void System.ComponentModel.IBindingList.RemoveSort()
        {
            this._blm4167706227.RemoveSort();
        }
        
        protected virtual void OnListChanged(System.ComponentModel.ListChangedEventArgs e)
        {
            if ((e == null))
            {
                throw new System.ArgumentNullException("e");
            }
            if ((this.RaiseListChangedEvents == false))
            {
                return;
            }
            if ((((e.ListChangedType == System.ComponentModel.ListChangedType.Reset) 
                        == false) 
                        && (e.NewIndex < 0)))
            {
                return;
            }
            if ((this.ListChanged != null))
            {
                this.ListChanged(this, e);
            }
        }
        
        public void AddRange(System.Collections.Generic.IEnumerable<Ladders.LadderPoints> collection)
        {
            CodeFluent.Runtime.Utilities.ConvertUtilities.AddRange(this, collection);
        }
        
        private void OnItemKeyChanged(object sender, CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int> e)
        {
            if ((e == null))
            {
                throw new System.ArgumentNullException("e");
            }
            Ladders.LadderPoints existing;
            if ((this.BaseTable.TryGetValue(e.OldKey, out existing) == false))
            {
                return;
            }
            if (((sender != null) 
                        && (typeof(CodeFluent.Runtime.Utilities.IKeyable<int>).IsAssignableFrom(sender.GetType()) == true)))
            {
                CodeFluent.Runtime.Utilities.IKeyable<int> item = ((CodeFluent.Runtime.Utilities.IKeyable<int>)(sender));
                try
                {
                    this.BaseTable.Add(item.Key, existing);
                }
                catch (System.ArgumentNullException ane)
                {
                    throw new System.ArgumentNullException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.VoidCollectionKey, "Ladders.LadderPointsCollection", ((CodeFluent.Runtime.ICodeFluentEntity)(item)).EntityKey), ane);
                }
                catch (System.ArgumentException ae)
                {
                    throw new System.ArgumentException(TennisClubLadder.Resources.Manager.GetUserMessage(null, CodeFluent.Runtime.UserExceptionType.ItemAlreadyAdded, "Ladders.LadderPointsCollection", item.Key), ae);
                }
                this.BaseTable.Remove(e.OldKey);
            }
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadAll(int pageIndex, int pageSize)
        {
            return Ladders.LadderPointsCollection.PageLoadAll(pageIndex, pageSize, null);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadByLadder(int pageIndex, int pageSize, int ladderId)
        {
            Ladders.Ladder ladder = Ladders.Ladder.Load(ladderId);
            if ((ladder == null))
            {
                return new Ladders.LadderPointsCollection();
            }
            return Ladders.LadderPointsCollection.PageLoadByLadder(pageIndex, pageSize, null, ladder);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.LadderPointsCollection PageLoadByRating(int pageIndex, int pageSize, int ratingId)
        {
            Ladders.PlayerRating playerRating = Ladders.PlayerRating.Load(ratingId);
            if ((playerRating == null))
            {
                return new Ladders.LadderPointsCollection();
            }
            return Ladders.LadderPointsCollection.PageLoadByRating(pageIndex, pageSize, null, playerRating);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                return false;
            }
            bool ret = ladderPoints.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(Ladders.LadderPoints ladderPoints)
        {
            bool ret = Ladders.LadderPoints.Save(ladderPoints);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(Ladders.LadderPoints ladderPoints)
        {
            if ((ladderPoints == null))
            {
                return false;
            }
            bool ret = ladderPoints.Delete();
            return ret;
        }
    }
}
