//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ladders
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Wednesday, 11 November 2015 01:11.
    // Build:1.0.61214.0829
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0829")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, Name={Name}, Id={Id}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class Ladder : System.ICloneable, System.IComparable, System.IComparable<Ladders.Ladder>, CodeFluent.Runtime.ICodeFluentCollectionEntity<int>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<Ladders.Ladder>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _name = default(string);
        
        private string _description = default(string);
        
        private System.DateTime _creationDate = CodeFluentPersistence.DefaultDateTimeValue;
        
        private System.Nullable<bool> _isActive = null;
        
        private int _maxPlayers = CodeFluentPersistence.DefaultInt32Value;
        
        private int _genderId = -1;
        
        [System.NonSerializedAttribute()]
        private Ladders.Gender _gender = null;
        
        private int _minAge = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxAge = CodeFluentPersistence.DefaultInt32Value;
        
        private int _minRating = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxRating = CodeFluentPersistence.DefaultInt32Value;
        
        private int _upperChallengeLimit = CodeFluentPersistence.DefaultInt32Value;
        
        private int _lowerChallengeLimit = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxPendingChallenges = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxQueuedChallenges = CodeFluentPersistence.DefaultInt32Value;
        
        private int _maxInactiveDays = CodeFluentPersistence.DefaultInt32Value;
        
        private bool _penalties = CodeFluentPersistence.DefaultBooleanValue;
        
        private float _inactivityPointLoss = CodeFluentPersistence.DefaultSingleValue;
        
        private int _minReqChallenges = CodeFluentPersistence.DefaultInt32Value;
        
        private int _minMatchDays = CodeFluentPersistence.DefaultInt32Value;
        
        private float _minMatchPointLoss = CodeFluentPersistence.DefaultSingleValue;
        
        private System.Nullable<bool> _ignoreAction = null;
        
        private System.Nullable<bool> _ignorePointLoss = null;
        
        private int _maxIgnoreDays = CodeFluentPersistence.DefaultInt32Value;
        
        private System.Nullable<bool> _challengeDecline = null;
        
        private int _maxDeclines = CodeFluentPersistence.DefaultInt32Value;
        
        private int _declineDays = CodeFluentPersistence.DefaultInt32Value;
        
        private float _declinePointLoss = CodeFluentPersistence.DefaultSingleValue;
        
        private float _forfeitPointLoss = CodeFluentPersistence.DefaultSingleValue;
        
        [System.NonSerializedAttribute()]
        private Ladders.ChallengeCollection _challenges;
        
        [System.NonSerializedAttribute()]
        private Ladders.LadderPlayerCollection _players;
        
        public Ladder()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.Name;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this._id) == true))
                {
                    return;
                }
                int oldKey = this._id;
                this._id = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._id = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                this._name = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Name"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                this._description = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Description"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(System.DateTime))]
        public System.DateTime CreationDate
        {
            get
            {
                return this._creationDate;
            }
            set
            {
                this._creationDate = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("CreationDate"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> isActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                this._isActive = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("isActive"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxPlayers
        {
            get
            {
                return this._maxPlayers;
            }
            set
            {
                this._maxPlayers = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxPlayers"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int GenderId
        {
            get
            {
                if (((this._genderId == -1) 
                            && (this._gender != null)))
                {
                    this._genderId = this._gender.Id;
                }
                return this._genderId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.GenderId) == true))
                {
                    return;
                }
                this._gender = null;
                this._genderId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Gender"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("GenderId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Ladders.Gender Gender
        {
            get
            {
                if ((this._gender == null))
                {
                    this._gender = Ladders.Gender.Load(this._genderId);
                }
                return this._gender;
            }
            set
            {
                this._genderId = -1;
                this._gender = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Gender"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("GenderId"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MinAge
        {
            get
            {
                return this._minAge;
            }
            set
            {
                this._minAge = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinAge"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxAge
        {
            get
            {
                return this._maxAge;
            }
            set
            {
                this._maxAge = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxAge"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MinRating
        {
            get
            {
                return this._minRating;
            }
            set
            {
                this._minRating = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinRating"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxRating
        {
            get
            {
                return this._maxRating;
            }
            set
            {
                this._maxRating = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxRating"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int UpperChallengeLimit
        {
            get
            {
                return this._upperChallengeLimit;
            }
            set
            {
                this._upperChallengeLimit = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("UpperChallengeLimit"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int LowerChallengeLimit
        {
            get
            {
                return this._lowerChallengeLimit;
            }
            set
            {
                this._lowerChallengeLimit = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("LowerChallengeLimit"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxPendingChallenges
        {
            get
            {
                return this._maxPendingChallenges;
            }
            set
            {
                this._maxPendingChallenges = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxPendingChallenges"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxQueuedChallenges
        {
            get
            {
                return this._maxQueuedChallenges;
            }
            set
            {
                this._maxQueuedChallenges = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxQueuedChallenges"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxInactiveDays
        {
            get
            {
                return this._maxInactiveDays;
            }
            set
            {
                this._maxInactiveDays = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxInactiveDays"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultBooleanValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(bool))]
        public bool Penalties
        {
            get
            {
                return this._penalties;
            }
            set
            {
                this._penalties = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Penalties"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultSingleValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(float))]
        public float InactivityPointLoss
        {
            get
            {
                return this._inactivityPointLoss;
            }
            set
            {
                this._inactivityPointLoss = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("InactivityPointLoss"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MinReqChallenges
        {
            get
            {
                return this._minReqChallenges;
            }
            set
            {
                this._minReqChallenges = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinReqChallenges"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MinMatchDays
        {
            get
            {
                return this._minMatchDays;
            }
            set
            {
                this._minMatchDays = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinMatchDays"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultSingleValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(float))]
        public float MinMatchPointLoss
        {
            get
            {
                return this._minMatchPointLoss;
            }
            set
            {
                this._minMatchPointLoss = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MinMatchPointLoss"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IgnoreAction
        {
            get
            {
                return this._ignoreAction;
            }
            set
            {
                this._ignoreAction = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IgnoreAction"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> IgnorePointLoss
        {
            get
            {
                return this._ignorePointLoss;
            }
            set
            {
                this._ignorePointLoss = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IgnorePointLoss"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxIgnoreDays
        {
            get
            {
                return this._maxIgnoreDays;
            }
            set
            {
                this._maxIgnoreDays = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxIgnoreDays"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> ChallengeDecline
        {
            get
            {
                return this._challengeDecline;
            }
            set
            {
                this._challengeDecline = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ChallengeDecline"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int MaxDeclines
        {
            get
            {
                return this._maxDeclines;
            }
            set
            {
                this._maxDeclines = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("MaxDeclines"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int DeclineDays
        {
            get
            {
                return this._declineDays;
            }
            set
            {
                this._declineDays = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DeclineDays"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultSingleValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(float))]
        public float DeclinePointLoss
        {
            get
            {
                return this._declinePointLoss;
            }
            set
            {
                this._declinePointLoss = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("DeclinePointLoss"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultSingleValue)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(float))]
        public float ForfeitPointLoss
        {
            get
            {
                return this._forfeitPointLoss;
            }
            set
            {
                this._forfeitPointLoss = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ForfeitPointLoss"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Ladders.ChallengeCollection Challenges
        {
            get
            {
                if ((this._challenges == null))
                {
                    if (((this.Id == -1) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._challenges = new Ladders.ChallengeCollection(this, null, null, null, null);
                        return this._challenges;
                    }
                    this._challenges = Ladders.ChallengeCollection.LoadByLadder(this);
                }
                return this._challenges;
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Ladders.LadderPlayerCollection Players
        {
            get
            {
                if ((this._players == null))
                {
                    if (((this.Id == -1) 
                                || (this.EntityState.Equals(CodeFluent.Runtime.CodeFluentEntityState.Created) == true)))
                    {
                        this._players = new Ladders.LadderPlayerCollection(this, null);
                        return this._players;
                    }
                    this._players = Ladders.LadderPlayerCollection.LoadByLadder(this);
                }
                return this._players;
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        int CodeFluent.Runtime.Utilities.IKeyable<System.Int32>.Key
        {
            get
            {
                return this.Id;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(Ladders.Ladder ladder)
        {
            if ((ladder == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(ladder);
            }
            return (this.Id.Equals(ladder.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            Ladders.Ladder ladder = null;
			ladder = obj as Ladders.Ladder;
            return this.Equals(ladder);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            Ladders.Ladder ladder = null;
ladder = value as Ladders.Ladder;
            if ((ladder == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(ladder);
            return localCompareTo;
        }
        
        public virtual int CompareTo(Ladders.Ladder ladder)
        {
            if ((ladder == null))
            {
                throw new System.ArgumentNullException("ladder");
            }
            int localCompareTo = this.Id.CompareTo(ladder.Id);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = TennisClubLadder.Resources.Manager.GetStringWithDefault(culture, "Ladders.Ladder.ExternalValidate", "Type \'Ladders.Ladder\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Ladder", "Delete");
            persistence.AddParameter("@Ladder_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Id", ((int)(-1)));
                this._name = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Name", ((string)(default(string))));
                this._description = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Description", ((string)(default(string))));
                this._creationDate = CodeFluentPersistence.GetReaderValue(reader, "Ladder_CreationDate", ((System.DateTime)(CodeFluentPersistence.DefaultDateTimeValue)));
                this._isActive = CodeFluentPersistence.GetReaderValue<bool>(reader, "Ladder_isActive");
                this._maxPlayers = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxPlayers", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this.GenderId = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Gender_Id", ((int)(-1)));
                this._minAge = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MinAge", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxAge = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxAge", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._minRating = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MinRating", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxRating = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxRating", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._upperChallengeLimit = CodeFluentPersistence.GetReaderValue(reader, "Ladder_UpperChallengeLimit", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._lowerChallengeLimit = CodeFluentPersistence.GetReaderValue(reader, "Ladder_LowerChallengeLimit", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxPendingChallenges = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxPendingChallenges", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxQueuedChallenges = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxQueuedChallenges", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._maxInactiveDays = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxInactiveDays", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._penalties = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Penalties", ((bool)(CodeFluentPersistence.DefaultBooleanValue)));
                this._inactivityPointLoss = CodeFluentPersistence.GetReaderValue(reader, "Ladder_InactivityPointLoss", ((float)(CodeFluentPersistence.DefaultSingleValue)));
                this._minReqChallenges = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MinReqChallenges", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._minMatchDays = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MinMatchDays", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._minMatchPointLoss = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MinMatchPointLoss", ((float)(CodeFluentPersistence.DefaultSingleValue)));
                this._ignoreAction = CodeFluentPersistence.GetReaderValue<bool>(reader, "Ladder_IgnoreAction");
                this._ignorePointLoss = CodeFluentPersistence.GetReaderValue<bool>(reader, "Ladder_IgnorePointLoss");
                this._maxIgnoreDays = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxIgnoreDays", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._challengeDecline = CodeFluentPersistence.GetReaderValue<bool>(reader, "Ladder_ChallengeDecline");
                this._maxDeclines = CodeFluentPersistence.GetReaderValue(reader, "Ladder_MaxDeclines", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._declineDays = CodeFluentPersistence.GetReaderValue(reader, "Ladder_DeclineDays", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._declinePointLoss = CodeFluentPersistence.GetReaderValue(reader, "Ladder_DeclinePointLoss", ((float)(CodeFluentPersistence.DefaultSingleValue)));
                this._forfeitPointLoss = CodeFluentPersistence.GetReaderValue(reader, "Ladder_ForfeitPointLoss", ((float)(CodeFluentPersistence.DefaultSingleValue)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._id = CodeFluentPersistence.GetReaderValue(reader, "Ladder_Id", ((int)(-1)));
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.Ladder Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            Ladders.Ladder ladder = new Ladders.Ladder();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Ladder", "Load");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    ladder.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    ladder.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return ladder;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static Ladders.Ladder LoadById(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            Ladders.Ladder ladder = new Ladders.Ladder();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Ladder", "LoadById");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    ladder.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    ladder.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return ladder;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Ladder", "Load");
            persistence.AddParameter("@Id", this.Id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Ladder", "Save");
            persistence.AddParameter("@Ladder_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@Ladder_Name", this.Name, default(string));
            persistence.AddParameter("@Ladder_Description", this.Description, default(string));
            persistence.AddParameter("@Ladder_CreationDate", this.CreationDate, CodeFluentPersistence.DefaultDateTimeValue);
            persistence.AddParameter("@Ladder_isActive", this.isActive);
            persistence.AddParameter("@Ladder_MaxPlayers", this.MaxPlayers, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_Gender_Id", this.GenderId, ((int)(-1)));
            persistence.AddParameter("@Ladder_MinAge", this.MinAge, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MaxAge", this.MaxAge, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MinRating", this.MinRating, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MaxRating", this.MaxRating, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_UpperChallengeLimit", this.UpperChallengeLimit, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_LowerChallengeLimit", this.LowerChallengeLimit, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MaxPendingChallenges", this.MaxPendingChallenges, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MaxQueuedChallenges", this.MaxQueuedChallenges, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MaxInactiveDays", this.MaxInactiveDays, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddRawParameter("@Ladder_Penalties", this.Penalties);
            persistence.AddParameter("@Ladder_InactivityPointLoss", this.InactivityPointLoss, CodeFluentPersistence.DefaultSingleValue);
            persistence.AddParameter("@Ladder_MinReqChallenges", this.MinReqChallenges, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MinMatchDays", this.MinMatchDays, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_MinMatchPointLoss", this.MinMatchPointLoss, CodeFluentPersistence.DefaultSingleValue);
            persistence.AddParameter("@Ladder_IgnoreAction", this.IgnoreAction);
            persistence.AddParameter("@Ladder_IgnorePointLoss", this.IgnorePointLoss);
            persistence.AddParameter("@Ladder_MaxIgnoreDays", this.MaxIgnoreDays, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_ChallengeDecline", this.ChallengeDecline);
            persistence.AddParameter("@Ladder_MaxDeclines", this.MaxDeclines, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_DeclineDays", this.DeclineDays, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Ladder_DeclinePointLoss", this.DeclinePointLoss, CodeFluentPersistence.DefaultSingleValue);
            persistence.AddParameter("@Ladder_ForfeitPointLoss", this.ForfeitPointLoss, CodeFluentPersistence.DefaultSingleValue);
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(Ladders.Ladder ladder)
        {
            if ((ladder == null))
            {
                return false;
            }
            bool ret = ladder.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(Ladders.Ladder ladder)
        {
            bool ret = Ladders.Ladder.Save(ladder);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(Ladders.Ladder ladder)
        {
            if ((ladder == null))
            {
                return false;
            }
            bool ret = ladder.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("Name=");
            writer.Write(this.Name);
            writer.Write(",");
            writer.Write("Description=");
            writer.Write(this.Description);
            writer.Write(",");
            writer.Write("CreationDate=");
            writer.Write(this.CreationDate);
            writer.Write(",");
            writer.Write("isActive=");
            writer.Write(this.isActive);
            writer.Write(",");
            writer.Write("MaxPlayers=");
            writer.Write(this.MaxPlayers);
            writer.Write(",");
            writer.Write("Gender=");
            if ((this._gender != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._gender)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_genderId=");
            writer.Write(this._genderId);
            writer.Write(",");
            writer.Write("MinAge=");
            writer.Write(this.MinAge);
            writer.Write(",");
            writer.Write("MaxAge=");
            writer.Write(this.MaxAge);
            writer.Write(",");
            writer.Write("MinRating=");
            writer.Write(this.MinRating);
            writer.Write(",");
            writer.Write("MaxRating=");
            writer.Write(this.MaxRating);
            writer.Write(",");
            writer.Write("UpperChallengeLimit=");
            writer.Write(this.UpperChallengeLimit);
            writer.Write(",");
            writer.Write("LowerChallengeLimit=");
            writer.Write(this.LowerChallengeLimit);
            writer.Write(",");
            writer.Write("MaxPendingChallenges=");
            writer.Write(this.MaxPendingChallenges);
            writer.Write(",");
            writer.Write("MaxQueuedChallenges=");
            writer.Write(this.MaxQueuedChallenges);
            writer.Write(",");
            writer.Write("MaxInactiveDays=");
            writer.Write(this.MaxInactiveDays);
            writer.Write(",");
            writer.Write("Penalties=");
            writer.Write(this.Penalties);
            writer.Write(",");
            writer.Write("InactivityPointLoss=");
            writer.Write(this.InactivityPointLoss);
            writer.Write(",");
            writer.Write("MinReqChallenges=");
            writer.Write(this.MinReqChallenges);
            writer.Write(",");
            writer.Write("MinMatchDays=");
            writer.Write(this.MinMatchDays);
            writer.Write(",");
            writer.Write("MinMatchPointLoss=");
            writer.Write(this.MinMatchPointLoss);
            writer.Write(",");
            writer.Write("IgnoreAction=");
            writer.Write(this.IgnoreAction);
            writer.Write(",");
            writer.Write("IgnorePointLoss=");
            writer.Write(this.IgnorePointLoss);
            writer.Write(",");
            writer.Write("MaxIgnoreDays=");
            writer.Write(this.MaxIgnoreDays);
            writer.Write(",");
            writer.Write("ChallengeDecline=");
            writer.Write(this.ChallengeDecline);
            writer.Write(",");
            writer.Write("MaxDeclines=");
            writer.Write(this.MaxDeclines);
            writer.Write(",");
            writer.Write("DeclineDays=");
            writer.Write(this.DeclineDays);
            writer.Write(",");
            writer.Write("DeclinePointLoss=");
            writer.Write(this.DeclinePointLoss);
            writer.Write(",");
            writer.Write("ForfeitPointLoss=");
            writer.Write(this.ForfeitPointLoss);
            writer.Write(",");
            writer.Write("Challenges=");
            if ((this._challenges != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._challenges)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("Players=");
            if ((this._players != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._players)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Ladders.Ladder LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            Ladders.Ladder ladder;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            ladder = Ladders.Ladder.Load(var);
            return ladder;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public Ladders.Ladder Clone(bool deep)
        {
            Ladders.Ladder ladder = new Ladders.Ladder();
            this.CopyTo(ladder, deep);
            return ladder;
        }
        
        public Ladders.Ladder Clone()
        {
            Ladders.Ladder localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("MinMatchDays") == true))
            {
                this.MinMatchDays = ((int)(ConvertUtilities.ChangeType(dict["MinMatchDays"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MinMatchPointLoss") == true))
            {
                this.MinMatchPointLoss = ((float)(ConvertUtilities.ChangeType(dict["MinMatchPointLoss"], typeof(float), CodeFluentPersistence.DefaultSingleValue)));
            }
            if ((dict.Contains("IgnoreAction") == true))
            {
                this.IgnoreAction = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["IgnoreAction"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("MinReqChallenges") == true))
            {
                this.MinReqChallenges = ((int)(ConvertUtilities.ChangeType(dict["MinReqChallenges"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MaxInactiveDays") == true))
            {
                this.MaxInactiveDays = ((int)(ConvertUtilities.ChangeType(dict["MaxInactiveDays"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Penalties") == true))
            {
                this.Penalties = ((bool)(ConvertUtilities.ChangeType(dict["Penalties"], typeof(bool), CodeFluentPersistence.DefaultBooleanValue)));
            }
            if ((dict.Contains("InactivityPointLoss") == true))
            {
                this.InactivityPointLoss = ((float)(ConvertUtilities.ChangeType(dict["InactivityPointLoss"], typeof(float), CodeFluentPersistence.DefaultSingleValue)));
            }
            if ((dict.Contains("DeclineDays") == true))
            {
                this.DeclineDays = ((int)(ConvertUtilities.ChangeType(dict["DeclineDays"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("DeclinePointLoss") == true))
            {
                this.DeclinePointLoss = ((float)(ConvertUtilities.ChangeType(dict["DeclinePointLoss"], typeof(float), CodeFluentPersistence.DefaultSingleValue)));
            }
            if ((dict.Contains("ForfeitPointLoss") == true))
            {
                this.ForfeitPointLoss = ((float)(ConvertUtilities.ChangeType(dict["ForfeitPointLoss"], typeof(float), CodeFluentPersistence.DefaultSingleValue)));
            }
            if ((dict.Contains("MaxDeclines") == true))
            {
                this.MaxDeclines = ((int)(ConvertUtilities.ChangeType(dict["MaxDeclines"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("IgnorePointLoss") == true))
            {
                this.IgnorePointLoss = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["IgnorePointLoss"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("MaxIgnoreDays") == true))
            {
                this.MaxIgnoreDays = ((int)(ConvertUtilities.ChangeType(dict["MaxIgnoreDays"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("ChallengeDecline") == true))
            {
                this.ChallengeDecline = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["ChallengeDecline"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("isActive") == true))
            {
                this.isActive = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["isActive"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("MaxPlayers") == true))
            {
                this.MaxPlayers = ((int)(ConvertUtilities.ChangeType(dict["MaxPlayers"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MinAge") == true))
            {
                this.MinAge = ((int)(ConvertUtilities.ChangeType(dict["MinAge"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Name") == true))
            {
                this.Name = ((string)(ConvertUtilities.ChangeType(dict["Name"], typeof(string), default(string))));
            }
            if ((dict.Contains("Description") == true))
            {
                this.Description = ((string)(ConvertUtilities.ChangeType(dict["Description"], typeof(string), default(string))));
            }
            if ((dict.Contains("CreationDate") == true))
            {
                this.CreationDate = ((System.DateTime)(ConvertUtilities.ChangeType(dict["CreationDate"], typeof(System.DateTime), CodeFluentPersistence.DefaultDateTimeValue)));
            }
            if ((dict.Contains("MaxAge") == true))
            {
                this.MaxAge = ((int)(ConvertUtilities.ChangeType(dict["MaxAge"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("LowerChallengeLimit") == true))
            {
                this.LowerChallengeLimit = ((int)(ConvertUtilities.ChangeType(dict["LowerChallengeLimit"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MaxPendingChallenges") == true))
            {
                this.MaxPendingChallenges = ((int)(ConvertUtilities.ChangeType(dict["MaxPendingChallenges"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MaxQueuedChallenges") == true))
            {
                this.MaxQueuedChallenges = ((int)(ConvertUtilities.ChangeType(dict["MaxQueuedChallenges"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("UpperChallengeLimit") == true))
            {
                this.UpperChallengeLimit = ((int)(ConvertUtilities.ChangeType(dict["UpperChallengeLimit"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MinRating") == true))
            {
                this.MinRating = ((int)(ConvertUtilities.ChangeType(dict["MinRating"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("MaxRating") == true))
            {
                this.MaxRating = ((int)(ConvertUtilities.ChangeType(dict["MaxRating"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("GenderId") == true))
            {
                this.GenderId = ((int)(ConvertUtilities.ChangeType(dict["GenderId"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(Ladders.Ladder ladder, bool deep)
        {
            if ((ladder == null))
            {
                throw new System.ArgumentNullException("ladder");
            }
            ladder.Id = this.Id;
            ladder.MinMatchDays = this.MinMatchDays;
            ladder.MinMatchPointLoss = this.MinMatchPointLoss;
            ladder.IgnoreAction = this.IgnoreAction;
            ladder.MinReqChallenges = this.MinReqChallenges;
            ladder.MaxInactiveDays = this.MaxInactiveDays;
            ladder.Penalties = this.Penalties;
            ladder.InactivityPointLoss = this.InactivityPointLoss;
            ladder.DeclineDays = this.DeclineDays;
            ladder.DeclinePointLoss = this.DeclinePointLoss;
            ladder.ForfeitPointLoss = this.ForfeitPointLoss;
            ladder.MaxDeclines = this.MaxDeclines;
            ladder.IgnorePointLoss = this.IgnorePointLoss;
            ladder.MaxIgnoreDays = this.MaxIgnoreDays;
            ladder.ChallengeDecline = this.ChallengeDecline;
            ladder.isActive = this.isActive;
            ladder.MaxPlayers = this.MaxPlayers;
            ladder.MinAge = this.MinAge;
            ladder.Name = this.Name;
            ladder.Description = this.Description;
            ladder.CreationDate = this.CreationDate;
            ladder.MaxAge = this.MaxAge;
            ladder.LowerChallengeLimit = this.LowerChallengeLimit;
            ladder.MaxPendingChallenges = this.MaxPendingChallenges;
            ladder.MaxQueuedChallenges = this.MaxQueuedChallenges;
            ladder.UpperChallengeLimit = this.UpperChallengeLimit;
            ladder.MinRating = this.MinRating;
            ladder.MaxRating = this.MaxRating;
            ladder.GenderId = this.GenderId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, ladder));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["MinMatchDays"] = this.MinMatchDays;
            dict["MinMatchPointLoss"] = this.MinMatchPointLoss;
            dict["IgnoreAction"] = this.IgnoreAction;
            dict["MinReqChallenges"] = this.MinReqChallenges;
            dict["MaxInactiveDays"] = this.MaxInactiveDays;
            dict["Penalties"] = this.Penalties;
            dict["InactivityPointLoss"] = this.InactivityPointLoss;
            dict["DeclineDays"] = this.DeclineDays;
            dict["DeclinePointLoss"] = this.DeclinePointLoss;
            dict["ForfeitPointLoss"] = this.ForfeitPointLoss;
            dict["MaxDeclines"] = this.MaxDeclines;
            dict["IgnorePointLoss"] = this.IgnorePointLoss;
            dict["MaxIgnoreDays"] = this.MaxIgnoreDays;
            dict["ChallengeDecline"] = this.ChallengeDecline;
            dict["isActive"] = this.isActive;
            dict["MaxPlayers"] = this.MaxPlayers;
            dict["MinAge"] = this.MinAge;
            dict["Name"] = this.Name;
            dict["Description"] = this.Description;
            dict["CreationDate"] = this.CreationDate;
            dict["MaxAge"] = this.MaxAge;
            dict["LowerChallengeLimit"] = this.LowerChallengeLimit;
            dict["MaxPendingChallenges"] = this.MaxPendingChallenges;
            dict["MaxQueuedChallenges"] = this.MaxQueuedChallenges;
            dict["UpperChallengeLimit"] = this.UpperChallengeLimit;
            dict["MinRating"] = this.MinRating;
            dict["MaxRating"] = this.MaxRating;
            dict["GenderId"] = this.GenderId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(int key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>(key));
            }
        }
    }
}
