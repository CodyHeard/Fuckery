//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Clubs
{
    using CodeFluent.Runtime;
    using CodeFluent.Runtime.Utilities;
    
    
    // CodeFluent Entities generated (http://www.softfluent.com). Date: Wednesday, 11 November 2015 01:11.
    // Build:1.0.61214.0829
    [System.CodeDom.Compiler.GeneratedCodeAttribute("CodeFluent Entities", "1.0.61214.0829")]
    [System.SerializableAttribute()]
    [System.ComponentModel.DataObjectAttribute()]
    [System.Diagnostics.DebuggerDisplayAttribute("EK={EntityKey}, AddressLine1={AddressLine1}, Id={Id}")]
    [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.NameTypeConverter))]
    public partial class Facility : System.ICloneable, System.IComparable, System.IComparable<Clubs.Facility>, CodeFluent.Runtime.ICodeFluentCollectionEntity<int>, System.ComponentModel.IDataErrorInfo, CodeFluent.Runtime.ICodeFluentMemberValidator, CodeFluent.Runtime.ICodeFluentSummaryValidator, System.IEquatable<Clubs.Facility>
    {
        
        private bool _raisePropertyChangedEvents = true;
        
        private CodeFluent.Runtime.CodeFluentEntityState _entityState;
        
        private byte[] _rowVersion;
        
        private int _id = -1;
        
        private string _addressLine1 = default(string);
        
        private string _addressLine2 = default(string);
        
        private string _fullName = default(string);
        
        private string _phone = default(string);
        
        private string _postcode = default(string);
        
        private string _reserveName = default(string);
        
        private string _email = default(string);
        
        private System.Nullable<bool> _isActive = null;
        
        private System.Nullable<bool> _isOnline = null;
        
        private string _referenceNo = default(string);
        
        private int _sequence = CodeFluentPersistence.DefaultInt32Value;
        
        private string _shortName = default(string);
        
        private string _state = default(string);
        
        private string _suburb = default(string);
        
        private int _clubId = -1;
        
        [System.NonSerializedAttribute()]
        private Clubs.Club _club = null;
        
        public Facility()
        {
            this._entityState = CodeFluent.Runtime.CodeFluentEntityState.Created;
        }
        
        [System.ComponentModel.BrowsableAttribute(false)]
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public virtual bool RaisePropertyChangedEvents
        {
            get
            {
                return this._raisePropertyChangedEvents;
            }
            set
            {
                this._raisePropertyChangedEvents = value;
            }
        }
        
        public virtual string EntityKey
        {
            get
            {
                return this.Id.ToString();
            }
            set
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(value, typeof(int), -1)));
            }
        }
        
        public virtual string EntityDisplayName
        {
            get
            {
                return this.AddressLine1;
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        [System.ComponentModel.DataObjectFieldAttribute(false, true)]
        [System.ComponentModel.TypeConverterAttribute(typeof(CodeFluent.Runtime.Design.ByteArrayConverter))]
        public byte[] RowVersion
        {
            get
            {
                return this._rowVersion;
            }
            set
            {
                if (((value != null) 
                            && (value.Length == 0)))
                {
                    value = null;
                }
                this._rowVersion = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("RowVersion"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(((int)(-1)))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int Id
        {
            get
            {
                return this._id;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this._id) == true))
                {
                    return;
                }
                int oldKey = this._id;
                this._id = value;
                try
                {
                    this.OnCollectionKeyChanged(oldKey);
                }
                catch (System.ArgumentException )
                {
                    this._id = oldKey;
                    return;
                }
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Id"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string AddressLine1
        {
            get
            {
                return this._addressLine1;
            }
            set
            {
                this._addressLine1 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressLine1"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string AddressLine2
        {
            get
            {
                return this._addressLine2;
            }
            set
            {
                this._addressLine2 = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("AddressLine2"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string FullName
        {
            get
            {
                return this._fullName;
            }
            set
            {
                this._fullName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("FullName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Phone
        {
            get
            {
                return this._phone;
            }
            set
            {
                this._phone = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Phone"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Postcode
        {
            get
            {
                return this._postcode;
            }
            set
            {
                this._postcode = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Postcode"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string ReserveName
        {
            get
            {
                return this._reserveName;
            }
            set
            {
                this._reserveName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ReserveName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Email
        {
            get
            {
                return this._email;
            }
            set
            {
                this._email = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Email"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> isActive
        {
            get
            {
                return this._isActive;
            }
            set
            {
                this._isActive = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("isActive"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<bool> isOnline
        {
            get
            {
                return this._isOnline;
            }
            set
            {
                this._isOnline = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("isOnline"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string ReferenceNo
        {
            get
            {
                return this._referenceNo;
            }
            set
            {
                this._referenceNo = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ReferenceNo"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(CodeFluentPersistence.DefaultInt32Value)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false, Type=typeof(int))]
        public int Sequence
        {
            get
            {
                return this._sequence;
            }
            set
            {
                this._sequence = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Sequence"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string ShortName
        {
            get
            {
                return this._shortName;
            }
            set
            {
                this._shortName = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ShortName"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string State
        {
            get
            {
                return this._state;
            }
            set
            {
                this._state = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("State"));
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(default(string))]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true, Type=typeof(string))]
        public string Suburb
        {
            get
            {
                return this._suburb;
            }
            set
            {
                this._suburb = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Suburb"));
            }
        }
        
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=false)]
        [System.ComponentModel.DataObjectFieldAttribute(true)]
        public int ClubId
        {
            get
            {
                if (((this._clubId == -1) 
                            && (this._club != null)))
                {
                    this._clubId = this._club.Id;
                }
                return this._clubId;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<int>.Default.Equals(value, this.ClubId) == true))
                {
                    return;
                }
                this._club = null;
                this._clubId = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Club"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ClubId"));
            }
        }
        
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public Clubs.Club Club
        {
            get
            {
                if ((this._club == null))
                {
                    this._club = Clubs.Club.Load(this._clubId);
                }
                return this._club;
            }
            set
            {
                this._clubId = -1;
                this._club = value;
                this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Modified;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("Club"));
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ClubId"));
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.Error
        {
            get
            {
                return this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            }
        }
        
        string System.ComponentModel.IDataErrorInfo.this[string columnName]
        {
            get
            {
                return CodeFluentPersistence.ValidateMember(System.Globalization.CultureInfo.CurrentCulture, this, columnName, null);
            }
        }
        
        int CodeFluent.Runtime.Utilities.IKeyable<System.Int32>.Key
        {
            get
            {
                return this.Id;
            }
        }
        
        public virtual CodeFluent.Runtime.CodeFluentEntityState EntityState
        {
            get
            {
                return this._entityState;
            }
            set
            {
                if ((System.Collections.Generic.EqualityComparer<CodeFluent.Runtime.CodeFluentEntityState>.Default.Equals(value, this.EntityState) == true))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                if (((this._entityState == CodeFluent.Runtime.CodeFluentEntityState.Created) 
                            && (value == CodeFluent.Runtime.CodeFluentEntityState.Modified)))
                {
                    return;
                }
                this._entityState = value;
                this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("EntityState"));
            }
        }
        
        [field:System.NonSerializedAttribute()]
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        [field:System.NonSerializedAttribute()]
        public event CodeFluent.Runtime.CodeFluentEntityActionEventHandler EntityAction;
        
        [field:System.NonSerializedAttribute()]
        public event System.EventHandler<CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>> KeyChanged;
        
        protected virtual void OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs e)
        {
            if ((this.RaisePropertyChangedEvents == false))
            {
                return;
            }
            if ((this.PropertyChanged != null))
            {
                this.PropertyChanged(this, e);
            }
        }
        
        protected virtual void OnEntityAction(CodeFluent.Runtime.CodeFluentEntityActionEventArgs e)
        {
            if ((this.EntityAction != null))
            {
                this.EntityAction(this, e);
            }
        }
        
        public virtual bool Equals(Clubs.Facility facility)
        {
            if ((facility == null))
            {
                return false;
            }
            if ((this.Id == -1))
            {
                return base.Equals(facility);
            }
            return (this.Id.Equals(facility.Id) == true);
        }
        
        public override int GetHashCode()
        {
            return this._id;
        }
        
        public override bool Equals(object obj)
        {
            Clubs.Facility facility = null;
			facility = obj as Clubs.Facility;
            return this.Equals(facility);
        }
        
        int System.IComparable.CompareTo(object value)
        {
            Clubs.Facility facility = null;
facility = value as Clubs.Facility;
            if ((facility == null))
            {
                throw new System.ArgumentException("value");
            }
            int localCompareTo = this.CompareTo(facility);
            return localCompareTo;
        }
        
        public virtual int CompareTo(Clubs.Facility facility)
        {
            if ((facility == null))
            {
                throw new System.ArgumentNullException("facility");
            }
            int localCompareTo = this.Id.CompareTo(facility.Id);
            return localCompareTo;
        }
        
        public virtual string Validate(System.Globalization.CultureInfo culture)
        {
            return CodeFluentPersistence.Validate(culture, this, null);
        }
        
        public virtual void Validate(System.Globalization.CultureInfo culture, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validating, true, results);
            evt.Culture = culture;
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                string externalValidate;
                if ((evt.Argument != null))
                {
                    externalValidate = evt.Argument.ToString();
                }
                else
                {
                    externalValidate = TennisClubLadder.Resources.Manager.GetStringWithDefault(culture, "Clubs.Facility.ExternalValidate", "Type \'Clubs.Facility\' cannot be validated.", null);
                }
                CodeFluentPersistence.AddValidationError(results, externalValidate);
            }
            CodeFluentPersistence.ValidateMember(culture, results, this, null);
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Validated, false, results));
        }
        
        public void Validate()
        {
            string var = this.Validate(System.Globalization.CultureInfo.CurrentCulture);
            if ((var != null))
            {
                throw new CodeFluent.Runtime.CodeFluentValidationException(var);
            }
        }
        
        string CodeFluent.Runtime.ICodeFluentValidator.Validate(System.Globalization.CultureInfo culture)
        {
            string localValidate = this.Validate(culture);
            return localValidate;
        }
        
        void CodeFluent.Runtime.ICodeFluentMemberValidator.Validate(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
            this.ValidateMember(culture, memberName, results);
        }
        
        public virtual bool Delete()
        {
            bool ret = false;
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleting, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return ret;
            }
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Deleted))
            {
                return ret;
            }
            if ((this.RowVersion == null))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Facility", "Delete");
            persistence.AddParameter("@Facility_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            persistence.ExecuteNonQuery();
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Deleted, false, false));
            ret = true;
            return ret;
        }
        
        protected virtual void ReadRecord(System.Data.IDataReader reader, CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.Properties) 
                        == 0) 
                        == false))
            {
                this._id = CodeFluentPersistence.GetReaderValue(reader, "Facility_Id", ((int)(-1)));
                this._addressLine1 = CodeFluentPersistence.GetReaderValue(reader, "Facility_AddressLine1", ((string)(default(string))));
                this._addressLine2 = CodeFluentPersistence.GetReaderValue(reader, "Facility_AddressLine2", ((string)(default(string))));
                this._fullName = CodeFluentPersistence.GetReaderValue(reader, "Facility_FullName", ((string)(default(string))));
                this._phone = CodeFluentPersistence.GetReaderValue(reader, "Facility_Phone", ((string)(default(string))));
                this._postcode = CodeFluentPersistence.GetReaderValue(reader, "Facility_Postcode", ((string)(default(string))));
                this._reserveName = CodeFluentPersistence.GetReaderValue(reader, "Facility_ReserveName", ((string)(default(string))));
                this._email = CodeFluentPersistence.GetReaderValue(reader, "Facility_Email", ((string)(default(string))));
                this._isActive = CodeFluentPersistence.GetReaderValue<bool>(reader, "Facility_isActive");
                this._isOnline = CodeFluentPersistence.GetReaderValue<bool>(reader, "Facility_isOnline");
                this._referenceNo = CodeFluentPersistence.GetReaderValue(reader, "Facility_ReferenceNo", ((string)(default(string))));
                this._sequence = CodeFluentPersistence.GetReaderValue(reader, "Facility_Sequence", ((int)(CodeFluentPersistence.DefaultInt32Value)));
                this._shortName = CodeFluentPersistence.GetReaderValue(reader, "Facility_ShortName", ((string)(default(string))));
                this._state = CodeFluentPersistence.GetReaderValue(reader, "Facility_State", ((string)(default(string))));
                this._suburb = CodeFluentPersistence.GetReaderValue(reader, "Facility_Suburb", ((string)(default(string))));
                this.ClubId = CodeFluentPersistence.GetReaderValue(reader, "Facility_Club_Id", ((int)(-1)));
            }
            if ((((options & CodeFluent.Runtime.CodeFluentReloadOptions.RowVersion) 
                        == 0) 
                        == false))
            {
                this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecord, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecord(System.Data.IDataReader reader)
        {
            this.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
        }
        
        protected virtual void ReadRecordOnSave(System.Data.IDataReader reader)
        {
            if ((reader == null))
            {
                throw new System.ArgumentNullException("reader");
            }
            this._id = CodeFluentPersistence.GetReaderValue(reader, "Facility_Id", ((int)(-1)));
            this._rowVersion = CodeFluentPersistence.GetReaderValue(reader, "_rowVersion", ((byte[])(null)));
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.ReadRecordOnSave, false, false));
        }
        
        void CodeFluent.Runtime.ICodeFluentEntity.ReadRecordOnSave(System.Data.IDataReader reader)
        {
            this.ReadRecordOnSave(reader);
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Clubs.Facility Load(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            Clubs.Facility facility = new Clubs.Facility();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Facility", "Load");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    facility.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    facility.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return facility;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, false)]
        public static Clubs.Facility LoadById(int id)
        {
            if ((id == -1))
            {
                return null;
            }
            Clubs.Facility facility = new Clubs.Facility();
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Facility", "LoadById");
            persistence.AddParameter("@Id", id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    facility.ReadRecord(reader, CodeFluent.Runtime.CodeFluentReloadOptions.Default);
                    facility.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    return facility;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return null;
        }
        
        public virtual bool Reload(CodeFluent.Runtime.CodeFluentReloadOptions options)
        {
            bool ret = false;
            if ((this.Id == -1))
            {
                return ret;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Facility", "Load");
            persistence.AddParameter("@Id", this.Id, ((int)(-1)));
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecord(reader, options);
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
                    ret = true;
                }
                else
                {
                    this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Deleted;
                }
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            return ret;
        }
        
        protected virtual bool BaseSave(bool force)
        {
            if ((this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.ToBeDeleted))
            {
                this.Delete();
                return false;
            }
            CodeFluent.Runtime.CodeFluentEntityActionEventArgs evt = new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saving, true);
            this.OnEntityAction(evt);
            if ((evt.Cancel == true))
            {
                return false;
            }
            CodeFluentPersistence.ThrowIfDeleted(this);
            this.Validate();
            if (((force == false) 
                        && (this.EntityState == CodeFluent.Runtime.CodeFluentEntityState.Unchanged)))
            {
                return false;
            }
            CodeFluent.Runtime.CodeFluentPersistence persistence = CodeFluentContext.Get(TennisClubLadder.Constants.TennisClubLadderStoreName).Persistence;
            persistence.CreateStoredProcedureCommand(null, "Facility", "Save");
            persistence.AddParameter("@Facility_Id", this.Id, ((int)(-1)));
            persistence.AddParameter("@Facility_AddressLine1", this.AddressLine1, default(string));
            persistence.AddParameter("@Facility_AddressLine2", this.AddressLine2, default(string));
            persistence.AddParameter("@Facility_FullName", this.FullName, default(string));
            persistence.AddParameter("@Facility_Phone", this.Phone, default(string));
            persistence.AddParameter("@Facility_Postcode", this.Postcode, default(string));
            persistence.AddParameter("@Facility_ReserveName", this.ReserveName, default(string));
            persistence.AddParameter("@Facility_Email", this.Email, default(string));
            persistence.AddParameter("@Facility_isActive", this.isActive);
            persistence.AddParameter("@Facility_isOnline", this.isOnline);
            persistence.AddParameter("@Facility_ReferenceNo", this.ReferenceNo, default(string));
            persistence.AddParameter("@Facility_Sequence", this.Sequence, CodeFluentPersistence.DefaultInt32Value);
            persistence.AddParameter("@Facility_ShortName", this.ShortName, default(string));
            persistence.AddParameter("@Facility_State", this.State, default(string));
            persistence.AddParameter("@Facility_Suburb", this.Suburb, default(string));
            persistence.AddParameter("@Facility_Club_Id", this.ClubId, ((int)(-1)));
            persistence.AddParameter("@_trackLastWriteUser", persistence.Context.User.Name);
            persistence.AddParameter("@_rowVersion", this.RowVersion);
            System.Data.IDataReader reader = null;
            try
            {
                reader = persistence.ExecuteReader();
                if ((reader.Read() == true))
                {
                    this.ReadRecordOnSave(reader);
                }
                CodeFluentPersistence.NextResults(reader);
            }
            finally
            {
                if ((reader != null))
                {
                    reader.Dispose();
                }
                persistence.CompleteCommand();
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.Saved, false, false));
            this.EntityState = CodeFluent.Runtime.CodeFluentEntityState.Unchanged;
            return true;
        }
        
        public virtual bool Save()
        {
            bool localSave = this.BaseSave(false);
            return localSave;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public static bool Save(Clubs.Facility facility)
        {
            if ((facility == null))
            {
                return false;
            }
            bool ret = facility.Save();
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public static bool Insert(Clubs.Facility facility)
        {
            bool ret = Clubs.Facility.Save(facility);
            return ret;
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public static bool Delete(Clubs.Facility facility)
        {
            if ((facility == null))
            {
                return false;
            }
            bool ret = facility.Delete();
            return ret;
        }
        
        public string Trace()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            System.IO.StringWriter stringWriter = new System.IO.StringWriter(stringBuilder, System.Globalization.CultureInfo.CurrentCulture);
            System.CodeDom.Compiler.IndentedTextWriter writer = new System.CodeDom.Compiler.IndentedTextWriter(stringWriter);
            this.BaseTrace(writer);
            writer.Flush();
            ((System.IDisposable)(writer)).Dispose();
            ((System.IDisposable)(stringWriter)).Dispose();
            string sr = stringBuilder.ToString();
            return sr;
        }
        
        void CodeFluent.Runtime.ICodeFluentObject.Trace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            this.BaseTrace(writer);
        }
        
        protected virtual void BaseTrace(System.CodeDom.Compiler.IndentedTextWriter writer)
        {
            writer.Write("[");
            writer.Write("Id=");
            writer.Write(this.Id);
            writer.Write(",");
            writer.Write("AddressLine1=");
            writer.Write(this.AddressLine1);
            writer.Write(",");
            writer.Write("AddressLine2=");
            writer.Write(this.AddressLine2);
            writer.Write(",");
            writer.Write("FullName=");
            writer.Write(this.FullName);
            writer.Write(",");
            writer.Write("Phone=");
            writer.Write(this.Phone);
            writer.Write(",");
            writer.Write("Postcode=");
            writer.Write(this.Postcode);
            writer.Write(",");
            writer.Write("ReserveName=");
            writer.Write(this.ReserveName);
            writer.Write(",");
            writer.Write("Email=");
            writer.Write(this.Email);
            writer.Write(",");
            writer.Write("isActive=");
            writer.Write(this.isActive);
            writer.Write(",");
            writer.Write("isOnline=");
            writer.Write(this.isOnline);
            writer.Write(",");
            writer.Write("ReferenceNo=");
            writer.Write(this.ReferenceNo);
            writer.Write(",");
            writer.Write("Sequence=");
            writer.Write(this.Sequence);
            writer.Write(",");
            writer.Write("ShortName=");
            writer.Write(this.ShortName);
            writer.Write(",");
            writer.Write("State=");
            writer.Write(this.State);
            writer.Write(",");
            writer.Write("Suburb=");
            writer.Write(this.Suburb);
            writer.Write(",");
            writer.Write("Club=");
            if ((this._club != null))
            {
                ((CodeFluent.Runtime.ICodeFluentObject)(this._club)).Trace(writer);
            }
            else
            {
                writer.Write("<null>");
            }
            writer.Write(",");
            writer.Write("_clubId=");
            writer.Write(this._clubId);
            writer.Write(", EntityState=");
            writer.Write(this.EntityState);
            writer.Write("]");
        }
        
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Select, true)]
        public static Clubs.Facility LoadByEntityKey(string key)
        {
            if ((key == string.Empty))
            {
                return null;
            }
            Clubs.Facility facility;
            int var = ((int)(ConvertUtilities.ChangeType(key, typeof(int), -1)));
            facility = Clubs.Facility.Load(var);
            return facility;
        }
        
        protected virtual void ValidateMember(System.Globalization.CultureInfo culture, string memberName, System.Collections.Generic.IList<CodeFluent.Runtime.CodeFluentValidationException> results)
        {
        }
        
        public Clubs.Facility Clone(bool deep)
        {
            Clubs.Facility facility = new Clubs.Facility();
            this.CopyTo(facility, deep);
            return facility;
        }
        
        public Clubs.Facility Clone()
        {
            Clubs.Facility localClone = this.Clone(true);
            return localClone;
        }
        
        object System.ICloneable.Clone()
        {
            object localClone = this.Clone();
            return localClone;
        }
        
        public virtual void CopyFrom(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            if ((dict.Contains("Id") == true))
            {
                this.Id = ((int)(ConvertUtilities.ChangeType(dict["Id"], typeof(int), -1)));
            }
            if ((dict.Contains("ReferenceNo") == true))
            {
                this.ReferenceNo = ((string)(ConvertUtilities.ChangeType(dict["ReferenceNo"], typeof(string), default(string))));
            }
            if ((dict.Contains("isOnline") == true))
            {
                this.isOnline = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["isOnline"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("isActive") == true))
            {
                this.isActive = ((System.Nullable<System.Boolean>)(ConvertUtilities.ChangeType(dict["isActive"], typeof(System.Nullable<System.Boolean>), null)));
            }
            if ((dict.Contains("Sequence") == true))
            {
                this.Sequence = ((int)(ConvertUtilities.ChangeType(dict["Sequence"], typeof(int), CodeFluentPersistence.DefaultInt32Value)));
            }
            if ((dict.Contains("Suburb") == true))
            {
                this.Suburb = ((string)(ConvertUtilities.ChangeType(dict["Suburb"], typeof(string), default(string))));
            }
            if ((dict.Contains("State") == true))
            {
                this.State = ((string)(ConvertUtilities.ChangeType(dict["State"], typeof(string), default(string))));
            }
            if ((dict.Contains("ShortName") == true))
            {
                this.ShortName = ((string)(ConvertUtilities.ChangeType(dict["ShortName"], typeof(string), default(string))));
            }
            if ((dict.Contains("FullName") == true))
            {
                this.FullName = ((string)(ConvertUtilities.ChangeType(dict["FullName"], typeof(string), default(string))));
            }
            if ((dict.Contains("AddressLine2") == true))
            {
                this.AddressLine2 = ((string)(ConvertUtilities.ChangeType(dict["AddressLine2"], typeof(string), default(string))));
            }
            if ((dict.Contains("AddressLine1") == true))
            {
                this.AddressLine1 = ((string)(ConvertUtilities.ChangeType(dict["AddressLine1"], typeof(string), default(string))));
            }
            if ((dict.Contains("Phone") == true))
            {
                this.Phone = ((string)(ConvertUtilities.ChangeType(dict["Phone"], typeof(string), default(string))));
            }
            if ((dict.Contains("Email") == true))
            {
                this.Email = ((string)(ConvertUtilities.ChangeType(dict["Email"], typeof(string), default(string))));
            }
            if ((dict.Contains("ReserveName") == true))
            {
                this.ReserveName = ((string)(ConvertUtilities.ChangeType(dict["ReserveName"], typeof(string), default(string))));
            }
            if ((dict.Contains("Postcode") == true))
            {
                this.Postcode = ((string)(ConvertUtilities.ChangeType(dict["Postcode"], typeof(string), default(string))));
            }
            if ((dict.Contains("ClubId") == true))
            {
                this.ClubId = ((int)(ConvertUtilities.ChangeType(dict["ClubId"], typeof(int), -1)));
            }
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyFrom, false, dict));
        }
        
        public virtual void CopyTo(Clubs.Facility facility, bool deep)
        {
            if ((facility == null))
            {
                throw new System.ArgumentNullException("facility");
            }
            facility.Id = this.Id;
            facility.ReferenceNo = this.ReferenceNo;
            facility.isOnline = this.isOnline;
            facility.isActive = this.isActive;
            facility.Sequence = this.Sequence;
            facility.Suburb = this.Suburb;
            facility.State = this.State;
            facility.ShortName = this.ShortName;
            facility.FullName = this.FullName;
            facility.AddressLine2 = this.AddressLine2;
            facility.AddressLine1 = this.AddressLine1;
            facility.Phone = this.Phone;
            facility.Email = this.Email;
            facility.ReserveName = this.ReserveName;
            facility.Postcode = this.Postcode;
            facility.ClubId = this.ClubId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, facility));
        }
        
        public virtual void CopyTo(System.Collections.IDictionary dict, bool deep)
        {
            if ((dict == null))
            {
                throw new System.ArgumentNullException("dict");
            }
            dict["Id"] = this.Id;
            dict["ReferenceNo"] = this.ReferenceNo;
            dict["isOnline"] = this.isOnline;
            dict["isActive"] = this.isActive;
            dict["Sequence"] = this.Sequence;
            dict["Suburb"] = this.Suburb;
            dict["State"] = this.State;
            dict["ShortName"] = this.ShortName;
            dict["FullName"] = this.FullName;
            dict["AddressLine2"] = this.AddressLine2;
            dict["AddressLine1"] = this.AddressLine1;
            dict["Phone"] = this.Phone;
            dict["Email"] = this.Email;
            dict["ReserveName"] = this.ReserveName;
            dict["Postcode"] = this.Postcode;
            dict["ClubId"] = this.ClubId;
            this.OnEntityAction(new CodeFluent.Runtime.CodeFluentEntityActionEventArgs(this, CodeFluent.Runtime.CodeFluentEntityAction.CopyTo, false, dict));
        }
        
        protected void OnCollectionKeyChanged(int key)
        {
            if ((this.KeyChanged != null))
            {
                this.KeyChanged(this, new CodeFluent.Runtime.Utilities.KeyChangedEventArgs<int>(key));
            }
        }
    }
}
